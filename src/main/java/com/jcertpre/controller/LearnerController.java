package com.jcertpre.controller;

import com.jcertpre.model.*;
import com.jcertpre.services.*;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

import static com.jcertpre.model.User.Role.LEARNER;

@Controller
@RequestMapping("/courses")
public class LearnerController {
    @Autowired
    private CourseService courseService;

    @Autowired
    private EnrollmentService  enrollmentService;

    @Autowired
    private InstructorService  instructorService;

    // üëâ Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ kh√≥a h·ªçc ƒë·ªÉ h·ªçc vi√™n ch·ªçn
    @GetMapping("/learner/register")
    public String showAvailableCourses(Model model, HttpSession session) {
        User user = (User) session.getAttribute("loggedInUser");

        if (user == null || user.getRole() != LEARNER) {
            return "redirect:/login";
        }

        List<Course> allCourses = courseService.getApprovedCourses();
        List<Course> enrolledCourses = enrollmentService.getCoursesByLearner(user.getId());

        // L·ªçc ra nh·ªØng kh√≥a h·ªçc h·ªçc vi√™n ch∆∞a ƒëƒÉng k√Ω
        allCourses.removeAll(enrolledCourses);

        model.addAttribute("enrolledCourses", enrolledCourses);
        model.addAttribute("availableCourses", allCourses);
        return "L4_GiaoDienDangKiKhoaHoc";
    }

    @PostMapping("/learner/register")
    public String registerCourse(@RequestParam("courseId") Long courseId,
                                 HttpSession session,
                                 RedirectAttributes redirectAttributes) {
        User user = (User) session.getAttribute("loggedInUser");

        if (user == null || user.getRole() != LEARNER) {
            return "redirect:/login";
        }

        Course course = courseService.findById(courseId);
        if (course == null) {
            redirectAttributes.addFlashAttribute("error", "Kh√≥a h·ªçc kh√¥ng t·ªìn t·∫°i.");
            return "redirect:/courses/learner/register";
        }

        enrollmentService.enrollLearnerToCourse(user, course); // B·∫°n c·∫ßn c√≥ ph∆∞∆°ng th·ª©c n√†y
        redirectAttributes.addFlashAttribute("message", "ƒêƒÉng k√Ω kh√≥a h·ªçc th√†nh c√¥ng!");
        return "redirect:/courses/learner/register";
    }

    @GetMapping("/{id}")
    public String viewLessonsByCourse(@PathVariable Long id,
                                      HttpSession session,
                                      Model model) {
        User user = (User) session.getAttribute("loggedInUser");

        // ‚úÖ Ki·ªÉm tra ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p v√† l√† h·ªçc vi√™n
        if (user == null || user.getRole() != LEARNER) {
            return "redirect:/login";
        }

        Course course = courseService.findById(id);
        if (course == null) {
            return "redirect:/courses/register";
        }

        // ‚úÖ L·∫•y danh s√°ch b√†i gi·∫£ng thu·ªôc kh√≥a h·ªçc
        List<Lesson> lessons = instructorService.getLessonsByCourse(id);

        model.addAttribute("course", course);
        model.addAttribute("lessons", lessons);
        return "Learner_ViewLessons";
    }

}
